<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>Table of Contents</div><div>01. Getting to Know HTML5<br /></div><div>02. Introducing JavaScript and the DOM</div><div>03. Events, Handlers and All that Jazz</div><div>04. JavaScript functions and Objects</div><div>(05.Â Geolocation)</div><div>06. Talking to the web</div><div>07. Canvas</div><div>08. Video</div><div>09. Web Storage</div><div>10. Web Workers</div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">01. Getting to Know HTML5</span></div><div>minimal html5 document:</div><blockquote><div>&lt;<span style="font-weight: bold;">!</span>doctype html&gt;</div><div><br /></div><div>
&lt;html&gt;</div><div><br /></div><div> &lt;head&gt;</div><div><br /></div><div> &lt;<span style="font-weight: bold;">meta charset</span>="utf-8"&gt;</div><div><br /></div><div> &lt;link<span style="font-weight: bold;">rel</span>="<span style="font-weight: bold;">stylesheet</span>"<span style="font-weight: bold;">href</span>="name.css"&gt;</div><div><br /></div><div> &lt;script src="src.js"&gt;&lt;/script&gt;</div><div><br /></div><div> &lt;/head&gt;</div><div><br /></div><div> &lt;body&gt;&lt;/body&gt;</div><div><br /></div><div>
&lt;/html&gt;</div></blockquote><div>&lt;script&gt; javascript code &lt;/script&gt;</div><div>var name = "tekst";</div><div>var othername = 100;</div><div>while(condition){...}</div><div>if(condition){}</div><div>else{}</div><div>name = name + "&lt;br&gt;"; // string concatination</div><div>document.write(name); // write string at position of &lt;script&gt; tag</div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">02. Introducing JavaScript and the DOM</span></div><div>var element = document.getElementById("idName");</div><div>element.innerHTML = "nieuwe tekst";</div><div>function initBlaBla() {...}</div><div>window.onload=initBlaBla;</div><div>var arr = new Array();</div><div>arr[1]="tests";</div><div>var arr = [4,8,6];</div><div>var length = arr.length;</div><div>Math.floor(x);</div><div>Math.random() * arr.length;</div><div>Book: David Flanagan - Javascript: The Definitive Guide</div><div>undefined != null</div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">03. Events, Handlers and All that Jazz</span></div><div>H3: Events, Handlers, ... - Interaction</div><div><div><br /></div><div><br /></div><div><span style="font-weight: bold;">DOM</span>: Document Object Model</div><div><br /></div><div><br /></div><div>adding a click listener to a button</div><blockquote>button.onclick = handleButtonClick; // self defined function</blockquote><blockquote><div>function handleButtonClick(){</div><div><br /></div><div> alert("Button was clicked");</div><div><br /></div><div>
}</div></blockquote><div>access or edit value of input text field</div><blockquote>txt.value = "new text"; // for input text fields</blockquote><div>creating a DOM element and add it to the page</div><blockquote><div>var li = document.createElement("li");</div><div><br /></div><div>
ul.appendChild(li);</div></blockquote></div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">04. JavaScript functions and Objects</span></div><div><br /></div><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Arguments VS Parameters</span>:</div><blockquote><div>fName(arg);</div><div><br /></div><div>
function fName(param){</div></blockquote><blockquote>return param;</blockquote><blockquote>}</blockquote><div><span style="font-weight: bold;">parameters</span>: pass-by-value</div><div><span style="font-weight: bold;">objects</span>: pass-by-reference</div><div>function without return, returns 'undefined'</div><div>functions are values</div><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Object Literals</span>:</div><blockquote><div>var obj = {</div><div><br /></div><div> name : "name",</div><div><br /></div><div> rank : 3,</div><div><br /></div><div> arrName : ["elt0","elt1"],</div><div><br /></div></blockquote><blockquote> methodName : function(){...}</blockquote><blockquote><div>}</div><div><br /></div><div><a href="http://obj.name/" target="_blank">obj.name</a>;</div><div><br /></div><div>
obj["name"];</div><div><br /></div><div>
for(prop in obj){...}</div></blockquote><div><br /></div><div><br /></div><div>Add/remove property to object</div><blockquote><div>obj.newFieldName = "test";</div><div><br /></div><div>
delete obj.newFieldName; // undefined</div></blockquote><div><br /></div><div><br /></div><div>current time:</div><blockquote>new Date().getTime();</blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Function vs Method</span></div><div><ul><li><div>function: global</div><div><br /></div></li><li><div>method: object-bound</div></li></ul><div><span style="font-weight: bold;">Constructor</span>(function with statements using 'this')</div></div><blockquote><div>function Dog(name, weight){</div><div><br /></div><div><a href="http://this.name/" target="_blank">this.name</a>= name;</div><div><br /></div><div> this.weight = weight;</div><div><br /></div><div> this.bark = function(){...};</div><div><br /></div><div>
}</div></blockquote><blockquote>var instance = new Dog("fido", 46);</blockquote><div>Assigning a variable without 'var' makes it global, even when done in a function</div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">06. Talking to the web</span></div><div><br /></div><div><span style="font-weight: bold;">A) XHR</span>or<span style="font-weight: bold;">AJAX</span>: XML Http Request</div><div><ul><li><div>secure</div></li><li><div>only from same server as webpage</div></li><li><div>not only JSON</div></li></ul></div><blockquote><div>var request = new XMLHttpRequest();</div><div><br /></div><div>
request.open("GET", url);</div><div><br /></div><div>
request.onload = function() {</div><div><br /></div><div> if (request.status == 200) {</div><div><br /></div><div> alert("Data received!");</div><div><br /></div><div> }</div><div><br /></div><div>
};</div><div><br /></div><div>
request.send(null); // or data you want to send</div></blockquote><div><span style="font-weight: bold;">JSON</span>: JavaScript Object Notation</div><blockquote><div>JSON.stringify(movie);</div><div><br /></div><div>
JSON.parse(jsonString);</div></blockquote><div>? WHY does 'for..in' not work but 'for i-n++' does work?</div><div>&gt; because 'for..in' is more complicated than 'for..i-n++'</div><div>-----------------------------------------------------------------------------</div><div><span style="font-weight: bold;">B) JSONP</span>: json with Padding</div><div><ul><li><div>less secure</div></li><li><div>from ANY server</div></li><li><div>automatically parsed as JavaScript</div></li><li><div>usually callback function</div></li></ul></div><blockquote><div>var newScriptElement = document.createElement("script");</div><div><br /></div><div>
newScriptElement.setAttribute("src", url);</div><div><br /></div><div>
newScriptElement.setAttribute("id", "jsonp");</div></blockquote><div>insert a script tag</div><div>&lt;script src="<a href="http://externalsite.be/dog.json?q=hfhtml5&amp;amp;callback=myCallback" target="_blank">http://externalsite.be/dog.json?q=hfhtml5&amp;callback=myCallback</a>"&gt;&lt;/script&gt;</div><div>linking a file usually containing</div><blockquote><div>var data = [{"name":"tw"},{"name":"other}]</div><div><br /></div><div>
myCallback(data);</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Script injection</span>: insert script tag with JavaScript</div><blockquote><div>var head = document.getElementsByTagName("head")[0];</div><div><br /></div><div>
if(oldScriptElement == null){</div><div><br /></div><div> head.appendChild(newScriptElement):</div><div><br /></div></blockquote><blockquote>}else{</blockquote><blockquote> head.replaceChild(newScriptElement, oldScriptElement);</blockquote><blockquote>}</blockquote><div>-----------------------------------------------------------------------------</div><div><span style="font-weight: bold;">Timer</span></div><blockquote>setInterval(handleRefresh, 3000);</blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Anti-browser-cache</span></div><blockquote>var url = "<a href="http://gumball.wickedlysmart.com/?callback=updateSales" target="_blank">http://gumball.wickedlysmart.com/?callback=updateSales</a>" +</blockquote><blockquote>"&amp;random=" + (new Date()).getTime();</blockquote><div><br /></div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">07. Canvas</span></div><div><br /></div><div>canvas html tag</div><blockquote>&lt;canvas id="..." width="300" height="150"&gt;Msg when canvas not supported&lt;/canvas&gt;</blockquote><div>css width and height SCALE the canvas</div><blockquote><div>var cancas = document.getElementById("...");</div><div><br /></div><div>
var context = canvas.getContext("2d");</div></blockquote><div>stroke/fill</div><blockquote>context.fillRect(x,y,width,height);</blockquote><div>check<span style="font-weight: bold;">support</span>:</div><blockquote>if(canvas.getContext){}</blockquote><div>check support without canvas in html:</div><blockquote>var cavas = document.createElement("canvas");</blockquote><div><span style="font-weight: bold;">color</span>(like CSS)</div><blockquote>context.fillStyle = "lightblue";</blockquote><div><br /></div><div><br /></div><div>// c --&gt; context</div><div><span style="font-weight: bold;">Create paths</span>:</div><blockquote><div>c.beginPath();</div><div><br /></div><div>
c.moveTo(x,y);</div><div><br /></div><div>
c.lineTo(x,y);</div><div><br /></div><div>
...</div><div><br /></div><div>
c.closePath();</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Draw paths</span>:</div><blockquote><div>c.lineWidth = 5</div><div><br /></div><div>
c.stroke();</div><div><br /></div><div>
c.fillStyle = "red";</div><div><br /></div><div>
c.fill();</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Arcs</span>:</div><div>angles in radial</div><div>direction true is counterClockwise</div><blockquote><div>c.beginPath();</div><div><br /></div><div>
c.arc(x,y,radius, startAngle, endAngle, direction);</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Text</span>:</div><div>c.font = "italic 1.2em serif"; // cfcss</div><div>c.textAlign = "left";</div><div>c.fillText("text", x,y);</div><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Image</span>:</div><div>var img = new Image();</div><div>img.src = "url.png";</div><div>img.onload = function(){c.drawImage(img, x, y, width, hieght);}</div><div><br /></div><hr /><div><br /></div><div><div><span style="font-weight: bold;">08 Video</span></div><blockquote>&lt;video controls autoplay src="video/preroll.mp4" width="480" height="360" poster="images/prerollposter.jpg" id="video"&gt;&lt;/video&gt;</blockquote><div style="font-size: 13px;"></div><div><span style="font-weight: bold;">attributes</span>:</div><div><ul><li><div>src="url": video file</div></li><li><div>width=""</div></li><li><div>height=""</div></li><li><div>controls: show controls</div></li><li><div>preload: load before play is clicked</div></li><li><div>autoplay: start playing when loaded</div></li><li><div>poster="imgSrc": show this image before playing</div></li><li><div>loop: auto replay</div></li></ul></div><div><br /></div><div><span style="font-weight: bold;">Video formats</span>:</div><div><br /></div><div>MP4: H264 video + AAC audio</div><ul><li><div>safari</div></li><li><div>IE9</div></li><li><div>chrome?</div></li></ul><div>Ogg: Theora video + Vorbis audio</div><ul><li><div>firefox</div></li><li><div>chrome</div></li><li><div>opera</div></li></ul><div>WebM: Vp8 video + Vorbis audio</div><ul><li><div>firefox</div></li><li><div>chrome</div></li><li><div>opera</div></li></ul><div><span style="font-weight: bold;"><br /></span></div><div><span style="font-weight: bold;">Fallback flash</span>:</div><div>&lt;object&gt; tag in &lt;video&gt;</div><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Extra's</span>:</div><div>scratch buffer to process video before copying it to the display.</div><div>no HTML5 standard for streaming</div><div>no standard way of protecting video delivered through the video element</div></div><div><br /></div><hr /><div><br /></div><div><b>H9: Web Storage - storing things locally</b></div><blockquote><div><span style="font-weight: bold;">localStorage</span>/<span style="font-weight: bold;">sessionStorage</span></div><div><br /></div><div>---------------------------</div><div><br /></div><div>
length</div><div><br /></div><div>
---------------------------</div><div><br /></div><div>
setItem("key", "value")</div><div><br /></div><div>
getItem("key") : "value"</div><div><br /></div><div>
key(i) : "key"</div><div><br /></div><div>
removeItem("key")</div><div><br /></div><div>
clear()</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Cookies</span>:</div><ul><li><div>size=4KB</div></li><li><div>key-value pairs</div></li><li><div>sent with every HTTP request</div></li></ul><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Web Storage</span>:</div><div><ul><li><div>size=5-10MB per domain</div></li><li><div>key-value pairs</div></li><li><div>private per browser, per domain</div></li></ul></div><div><br /></div><div><br /></div><div><span style="font-weight: bold;">save/load</span>:</div><blockquote><div>localStorage.setItem("key", "value"); // overrides if key already exists</div><div><br /></div><div>
var valueString = localStorage.getItem("key");</div></blockquote><div>or</div><blockquote><div>localStorage["key"] = "value";</div><div><br /></div><div>
var value = localStorage["key"];</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">check if supported</span></div><blockquote>if (window["localStorage"]) {...}</blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">loop</span>through whole storage: (undefined order)</div><blockquote><div>for (var i = 0; i &lt; localStorage.length; i++) {</div><div><br /></div><div> var key = localStorage.key(i);</div><div><br /></div><div> var value = localStorage[key];</div><div><br /></div><div>
}</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">FOR IN</span></div><blockquote><div>for (var key in localStorage) {</div><div><br /></div><div> var value = localStorage[key];</div><div><br /></div><div>
}</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">remove</span>:</div><blockquote>localStorage.removeItem("key");</blockquote><div><br /></div><div><br /></div><div>Developer tools of a browser can show all local storage</div><div><br /></div><div><br /></div><div>use JSON to store arrays,objects,... in localstorage</div><div><br /></div><div><br /></div><div>Going over the<span style="font-weight: bold;">quota</span>:</div><blockquote><div>try {</div><div><br /></div><div> localStorage.setItem(myKey, myValue);</div><div><br /></div><div>
} catch(e) {</div><div><br /></div><div> if (e == QUOTA_EXCEEDED_ERR) {}</div><div><br /></div><div>
}</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">Session Storage</span>:</div><div><ul><li><div>remove data on exit</div></li><li><div>"sessionStorage" instead of "localStorage"</div></li></ul></div><div><br /></div><div><br /></div><div>? Does editing page source allow localStorage.clear() for that domain?</div><div><br /></div><hr /><div><br /></div><div>10 Web Workers</div><div><br /></div><div><br /></div><div><span style="font-weight: bold;">MAIN</span></div><div><br /></div><div><br /></div><div>check if workers are<span style="font-weight: bold;">available</span>:</div><blockquote><div>if (window["Worker"]) {</div><div><br /></div><div>
var status = document.getElementById("status");</div><div><br /></div><div>
status.innerHTML = "Bummer, no Web Workers";</div><div><br /></div><div>
}</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">create</span>workers:</div><blockquote><div>var worker = new Worker("worker.js");</div><div><br /></div><div>
var worker2 = new Worker("worker.js");</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">communicate</span>(string, array, JSON, not functions):</div><blockquote>worker.postMessage("ping");</blockquote><div><br /></div><div><br /></div><blockquote><div>worker.onmessage = function (event) {</div><div><br /></div><div>
var message = "Worker says " + event.data;</div><div><br /></div><div>
var worker = event.target;</div><div><br /></div><div>
};</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">WORKER</span></div><blockquote><div>onmessage = pingPong;</div><div><br /></div><div>
function pingPong(event) {</div><div><br /></div><div> if (event.data == "ping") {</div><div><br /></div><div> postMessage("pong");</div><div><br /></div><div> }</div><div><br /></div><div>
}</div></blockquote><div><br /></div><div><br /></div><div><span style="font-weight: bold;">VARIA</span></div><div><br /></div><div><br /></div><div>scripts:</div><blockquote>importScripts("<a href="http://bigscience.org/nuclear.js" target="_blank">http://bigscience.org/nuclear.js</a>","mylibs/atomsmasher.js");</blockquote><div><br /></div><div><br /></div><div>main:</div><blockquote>worker.terminate();</blockquote><div>worker:</div><blockquote>close();</blockquote><div><br /></div><div><br /></div><div>handle errors (main):</div><blockquote><div>worker.onerror = function(error) {</div><div><br /></div><div> document.getElementById("output").innerHTML ="There was an error in " + error.filename +" at line number " + error.lineno +": " + error.message;</div><div><br /></div><div>
}</div></blockquote><div><br /></div><div><br /></div><div>workers can use</div><div><ul><li><div>XMLHttpRequest</div></li><li><div>Local Storage</div></li></ul></div><div><br /></div></en-note>