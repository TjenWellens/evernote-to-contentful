<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><a href="http://udemy.com/course/building-modern-web-applications-with-go">udemy.com/course/building-modern-web-applications-with-go</a></div><div><a href="https://github.com/tsawler/bookings-app">https://github.com/tsawler/bookings-app</a></div><div><br /></div><hr /><div><br /></div><div><span style="--inversion-type-color: simple; color: rgb(25, 25, 25);">top</span></div><div><span style="--inversion-type-color: simple; color: rgb(25, 25, 25);">uptime</span></div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">switch</span></div><div>default breaks out of cases (no overflow)</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>switch "foo" {</div><div>case "foo":</div><div>   log.Println("foo")</div><div>case "bar", "baz":    // multiple cases like this</div><div>   log.Println("bar")</div><div>default:</div><div>   log.Println("unknown")</div><div>}</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">packages</span></div><div><br /></div><div>you can use a url, even if you haven't pushed it there</div><div><br /></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>go mod init github.com/tjenwellens/foo</div></div><div><br /></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>import (</div><div>    "github.com/tjenwellens/foo"</div><div>)</div></div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">JSON</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>type Person struct {</div><div>   FirstName string `json:"first_name"`</div><div>   LastName  string `json:"last_name"`</div><div>}</div><div><br /></div><div>var people []Person</div><div>err := json.Unmarshal([]byte(json), &amp;unmashalled)</div><div><br /></div><div>jsonBytes, err := json.Marshal(people)</div><div>// or</div><div>jsonBytes, err := json.MarshalIndent(people, "", "    ")</div><div><br /></div><div><br /></div><div>func JSON(w http.ResponseWriter, req *http.Request) {</div><div>    w.Header().Set("Content-Type", "application/json")</div><div>    w.Write(jsonBytes)</div><div>}</div></div><div><br /></div><hr /><div><br /></div><div>Testing</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>go test</div><div>go test -cover</div><div>go test -coverprofile=coverage.out &amp;&amp; go tool cover -html=coverage.out</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">Web server</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>func main() {</div><div>   http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {</div><div>      _, err := fmt.Fprintf(w, "Hello world!")</div><div>      if err != nil {</div><div>         fmt.Println("Error:", err)</div><div>         return</div><div>      }</div><div>   })</div><div><div><br /></div><div><br /></div></div><div>   _ = http.ListenAndServe(":8080", nil)</div><div>}</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">Private vs Public functions</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>func PublicFuntionStartsUpperCase(){}</div><div><br /></div><div>func privateFunctionStartLowerCase(){}</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">Errors</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>return nil, errors.New("cannot divide by zero")</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">Template (std lib)</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>parsedTemplate, _ := template.ParseFiles("./template/about.page.tmpl")</div><div>err := parsedTemplate.Execute(w, nil)</div></div><div><br /></div><div><span style="font-weight: bold;">Layout templates</span></div><div><br /></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><div>parsedTemplate, _ := template.ParseFiles("./template/about.page.tmpl", "./template/base.layout.tmpl")</div><div>// or</div></div><div>tmpl, err := template.New(name).ParseFiles(page).ParseGlob("./templates/*.layout.tmpl")</div><div><br /></div><div>type TemplateData struct {</div><div>   StringMap map[string]string</div><div>}</div><div>err := parsedTemplate.Execute(w, TemplateData{StringMap: map[string]string{"Hello, again."}})</div><div><span style="font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco;"><br /></span></div></div><div>base.layout.tmpl</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>{{define "base"}}</div><div>    &lt;!DOCTYPE html&gt;</div><div>    &lt;html lang="en"&gt;</div><div>    &lt;head&gt;</div><div>        &lt;title&gt;Home&lt;/title&gt;</div><div>    &lt;/head&gt;</div><div>    &lt;body&gt;</div><div>    {{block "content" .}}</div><div>    {{end}}</div><div>    &lt;/body&gt;</div><div>    &lt;/html&gt;</div><div>{{end}}</div></div><div><br /></div><div>about.page.tmpl</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>{{template "base" .}}</div><div><div><br /></div></div><div>{{define "content"}}</div><div>&lt;h1&gt;This is the about page&lt;/h1&gt;</div><div>&lt;p&gt;data passed in template: {{index .StringMap "test"}}&lt;/p&gt;</div><div>{{end}}</div></div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">Routing libraries</span></div><ul><li><div>PAT (<a href="http://godoc.org/github.com/bmizerany/pat">godoc</a>, <a href="https://github.com/bmizerany/pat">github</a>)</div></li><li><div>chi (<a href="https://github.com/go-chi/chi%E2%80%A8">github</a>) has middleware</div></li></ul><div><br /></div><div>PAT / chi</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>mux := pat.New()</div><div>//or</div><div>mux := chi.NewRouter()</div><div><br /></div><div>// serve</div><div>srv := &amp;http.Server{</div><div>   Addr:    fmt.Sprintf(":%v", port),</div><div>   Handler: mux,</div><div>}</div><div>err = srv.ListenAndServe()</div><div>log.Fatal(err)</div></div><div><br /></div><div>PAT add route</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>mux.Get("/", http.HandlerFunc(handlers.Repo.Home)) // cast to handlerFunc</div></div><div> Chi add route</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>mux.Get("/", handlers.Repo.Home)</div></div><div><br /></div><div>Chi middleware</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>mux := chi.NewRouter()</div><div><br /></div><div>// custom middleware</div><div>mux.Use(func (next http.Handler){</div><div>    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {</div><div>        // do something</div><div>        next.ServeHTTP(w, r)</div><div>    }</div><div>})</div></div><div><br /></div><div>go cleanup unused packages</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>go mod tidy</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">CSRF (Cross Site Request Forgery)</span></div><div>lib: nosurf (<a href="https://github.com/justinas/nosurf">github</a>)</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>mux.Use(NoSurf) // blocks any post not containing the csrf_token</div><div><br /></div><div>func NoSurf(next http.Handler) http.Handler {</div><div>   csrfHandler := nosurf.New(next)</div><div>   csrfHandler.SetBaseCookie(http.Cookie{</div><div>      HttpOnly: true,</div><div>      Path:     "/",</div><div>      Secure:   app.InProduction,</div><div>      SameSite: http.SameSiteLaxMode,</div><div>   })</div><div>   return csrfHandler</div><div>}</div><div><br /></div><div><br /></div><div>&lt;input type="text" name="csrf_token" value="{{.CSRFToken}}"/&gt;</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">Auth - Session</span></div><div>lib: scs (<a href="https://github.com/alexedwards/scs">github</a>)</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>App.session = scs.New()</div><div>App.session.Lifetime = 24 * time.Hour</div><div>App.session.Cookie.Persist = true</div><div>App.session.Cookie.SameSite = http.SameSiteLaxMode</div><div>App.session.Cookie.Secure = true</div><div><br /></div><div>mux.Use(session.LoadAndSave)</div><div><br /></div><div>App.Session.GetString(req.Context(), "remote_ip")</div><div><br /></div><div>App.Session.Put(req.Context(), "remote_ip", remoteIP)</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">static file hosting</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>fileServer := http.FileServer(http.Dir("./static/"))</div><div>mux.Handle("/static/*", http.StripPrefix("/static", fileServer))</div></div><div><br /></div><hr /><div><a href="evernote:///view/30809684/s230/9cdf082f-d572-47ad-ac88-cd22d45644e0/9cdf082f-d572-47ad-ac88-cd22d45644e0/" style="color: rgb(105, 170, 53);">Go template plugin intellij idea</a></div><div><br /></div><hr /><div><br /></div><div><span style="font-weight: bold;">receive post form data</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>func PostAvailability(w http.ResponseWriter, req *http.Request) {</div><div>    start := req.Form.Get("start")</div><div>    w.Write(byte[](fmt.Sprintf("posted %v", start)))</div><div>}</div></div><div><br /></div><hr /><div><span style="font-weight: bold;">Alternate templating engine</span> </div><div>lib: jet template (<a href="https://github.com/CloudyKit/jet">github</a>)</div><div><br /></div><hr /><div>email</div><div>stdlib</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><span style="font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco;">smtp.PlainAuth</span></div><div><br /></div><hr /><div>Auth</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>// save password (hashed)</div><div><span style="font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco;">hashedPassword, _ := bcrypt.GenerateFromPassword([]byte(password), 12)</span></div><div><br /></div><div><br /></div><div>// validate if passwords match</div><div>err = bcrypt.CompareHashAndPassword([]byte(hashedPassword, []byte(testPassword)))</div><div>if err == bcrypt == bcrypt.ErrMismatchedHashAndPassword {...}</div><div>else if err != nil {...}</div><div><br /></div></div><div><br /></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>func (m *Repository) PostLogin(w http.ResponseWriter, r *http.Request) {</div><div>    _ = m.App.Session.RenewToken(r.Context()) // prevents session fixation attack (on login and logout)</div><div><div><br /></div></div><div>    err := r.ParseForm()</div><div>    if err != nil {...}</div><div><div><br /></div></div><div>    form := forms.New(r.PostForm)</div><div>    form.Required("email", "password")</div><div>    form.IsEmail("email")</div><div>    if !form.Valid() {</div><div>        render.Template(w,r, "login.page.tmpl", &amp;models.TemplateData{Form: form})</div><div><span style="font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco;">        return</span></div><div>    }</div><div><div><br /></div></div><div>    email := r.Form.Get("email")</div><div>    password := r.Form.Get("password")</div><div>    id, err := m.DB.Authenticate(email, password)</div><div>    if err != nil {</div><div>        log.PrintLn(err)</div><div>        m.App.Session.Put(r.Context(), "error", "Invalid Login Credentials")</div><div>        http.Redirect(w,r,"/user/login", http.StatusSeeOther)</div><div>        return</div><div>    }</div><div><div><br /></div></div><div>    m.App.Session.Put(r.Context(), "user_id", id)</div><div>    m.App.Session.Put(r.Context(), "flash", "Login Success")</div><div>    http.Redirect(w,r,"/user/login", http.StatusSeeOther)</div><div>}</div></div><div><br /></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>func IsAuthenticated(r *http.Request) bool {</div><div>    exists := app.Session.Exists(r.Context(), "user_id")</div><div>    return exists</div><div>}</div><div><div><br /></div></div><div>func AuthMiddleware(next http.Handler) http.Handler {</div><div>    return http.HandlerFunc(func(w http.ResponseWriter, r *hhtp.Request){</div><div>        if ! IsAuthenticated(r) {</div><div>            session.Put(r.Context(), "error", "Log in first")</div><div>            http.Redirect(w,r,"/user/login", http.StatusSeeOther)</div><div>            return</div><div>        }</div><div>        next.ServeHTTP(w,r)</div><div>    })</div><div>}</div><div><div><br /></div></div><div>...</div><div>mux.Route("/admin", func(mux chi.Router){</div><div>    mux.Use(AuthMiddleware)</div><div>    mux.Get("/dashboard", handlers.Repo.AdminDashboard)</div><div>})</div></div><div><br /></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div>func (m *Repository) Logout(w http.ResponseWriter, r *http.Request) {</div><div>    _ = m.App.Session.Destroy(r,Context())</div><div>    _ = m.App.Session.RenewToken(r,Context())</div><div>   http.Redirect(w,r,"/user/login", http.StatusSeeOther)</div><div>}</div></div><div><br /></div></en-note>